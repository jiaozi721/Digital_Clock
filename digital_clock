#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/signal.h>

#define standard_count 800 //128분주에 맞는 값 조정
#define Stop_count 8 //스탑워치 ms를 표현하기 위한 기준시간

volatile unsigned char sec=0, min=0, hour=0, Alarm_hour=12, Alarm_min=0, stop_count=0,a=0,
FND_count=0, Basic_Time ,Alarm_ON, Mode=1, Mode_Display,AP=0,
Stop_Watch, SW_msec=0, SW_sec=0, SW_min=0, function=0 ,Alarm_sec=0
;
void initialize_timer(void);
volatile unsigned int Main_count=0;

// ===시계 fnd 숫자 표시를 위한 배열 ===============================================
volatile unsigned char fnd_num[] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09};
volatile unsigned char select_fnd[] = {0x10,0x20,0x30,0x40,0x50,0x60};

// === dot-matrix seletc를 위한 배열================================================
volatile unsigned char select_matrix[] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07};

// === dot-matrix 여러가지 모양 출력을 위한 배열====================================
volatile unsigned char sun_2[] = {0xef,0xbd,0xe7,0xc3,0xc3,0xe7,0xbd,0xf7};
volatile unsigned char sun_1[] = {0xDB,0xFF,0x66,0xC3,0xC3,0x66,0xFF,0xDB};
volatile unsigned char sun_3[] = {0xd3,0xff,0x66,0xc3,0xc3,0x66,0xff,0xcb};
volatile unsigned char moon_3[]={0xff,0xe7,0xc3,0x81,0x81,0xc3,0xe7,0xff};
volatile unsigned char moon_2[]={0xff,0xf7,0xf3,0xf1,0xf1,0xf3,0xf7,0xff};
volatile unsigned char moon_1[]={0xff,0xe7,0xf3,0xf9,0xf9,0xf3,0xe7,0xff};
volatile unsigned char al_1[]={0x00,0x16,0xd6,0xd0,0xd6,0xd9,0xff,0x00};
volatile unsigned char al_2[]={0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x00};
volatile unsigned char stop_1[]={0xff,0xff,0x40,0x5f,0x5f,0xbf,0xff,0xff};
volatile unsigned char stop_2[]={0xff,0xff,0x10,0xd7,0xd7,0xef,0xff,0xff};
volatile unsigned char stop_3[]={0xff,0xff,0x04,0xf5,0xf5,0xfb,0xff,0xff};
volatile unsigned char stop_4[]={0xff,0xff,0x01,0xfd,0xfd,0xfe,0xff,0xff};
volatile unsigned char stop_status[]={0xf7,0xeb,0xc1,0xff,0xaa,0xdd,0xff,0xff};

SIGNAL(SIG_OVERFLOW0)//timer0 Overflow interrupt
{
  Main_count++;
  
  if(Mode==4 && function ==1)
  {    //Mode=4에서 int2키가 눌릴경우 작동시작
    stop_count++;
    if(stop_count==Stop_count)
    {
      stop_count = 0;
      SW_msec++;
    }
    
    if(SW_msec>99)
    { 
      SW_msec=0;
      SW_sec++; 
    }
    
    if(SW_sec>59)
    { 
      SW_sec=0; 
      SW_min++; 
    }
  }
  
  if(Mode<=2)
  {    //Mode=1,2일경우 오전에는 해모양, 오후에는 달모양이 디스플레이됨
    if((Main_count/265)%3==0)
    {    //display 간격 1초에 약 3번
      if(AP==0)
      {
        PORTF=sun_1[Main_count%8];
        PORTA=select_matrix[Main_count%8];
      }
      else 
      {
        PORTF=moon_1[Main_count%8];
        PORTA=select_matrix[Main_count%8];
      }
    }

    else if((Main_count/265)%3==1)
    {
      if(AP==0)
      {
        PORTF=sun_2[Main_count%8];
        PORTA=select_matrix[Main_count%8];
      }
      else 
      {
        PORTF=moon_2[Main_count%8];
        PORTA=select_matrix[Main_count%8];}
    }

    else 
    {
      if(AP==0)
      {
        PORTF=sun_3[Main_count%8];
        PORTA=select_matrix[Main_count%8];
      }
      
      else 
      {
        PORTF=moon_3[Main_count%8];
        PORTA=select_matrix[Main_count%8];
      }
    }
  }
  
  else if(Mode==3)
  {             //Mode=3 AL이라는 문구를 ON-OFF하며 출력하는 조건
    if((Main_count/200)%2==0)
    {           //1초에 약 2번 ON-OFF
      PORTF=al_1[Main_count%8];
      PORTA=select_matrix[Main_count%8];
    }
    
    else
    {
      PORTF=al_2[Main_count%8];
      PORTA=select_matrix[Main_count%8];
    }
  }

  else 
  {           //Mode=4 0.25시간 텀으로 펄스모양이 우측에서 좌측으로 이동
    if(Mode==4 && function ==1)
    {
      if((SW_msec/24)%4==0)
      {
        PORTF=stop_1[stop_count%8];
        PORTA=select_matrix[stop_count%8];
      }
      
      else if((SW_msec/24)%4==1)
      {
        PORTF=stop_2[stop_count%8];
        PORTA=select_matrix[stop_count%8];
      }
      
      else if((SW_msec/24)%4==2)
      {
        PORTF=stop_3[stop_count%8];
        PORTA=select_matrix[stop_count%8];
      }
      
      else
      {
        PORTF=stop_4[stop_count%8];
        PORTA=select_matrix[stop_count%8];
      }
    }
    
    else if(Mode==4 && function==0)
    {
      PORTF=stop_status[Main_count%8];
      PORTA=select_matrix[Main_count%8];
    }
  }

  if(Alarm_hour==hour && Alarm_min == min && a==0)
  {             // 시간 설정시 알람 구동을 위한 조건
    if((Main_count/100)%3==0)
    {
      PORTD=0x10;
    }
    
    else if((Main_count/100)%3==1)
    {
      PORTD=0x00;
    }
    
    else
    {
      PORTD=0x10;
    }
  }
  
  if(Main_count==standard_count)
  {         //기본 시간 함수
    Main_count = 0;
    sec++;
    if(sec>59)
    { 
      sec=0; min++;
    }
    if(min>59)
    { 
      min=0; 
      hour++; 
    }
    if(hour>12)
    {
      hour=0; 
      AP++; 
      if(AP>1)
      {
        AP=0;
      }
    }
  }
  
  if(FND_count==0)
  { 
    FND_count=1;
    Basic_Time= select_fnd[5] | fnd_num[hour/10];
    Alarm_ON= select_fnd[5] | fnd_num[Alarm_hour/10];
    Stop_Watch= select_fnd[5] | fnd_num[SW_min/10];
  }
  
  else if(FND_count==1)
  { 
    FND_count=2;
    Basic_Time= select_fnd[4] | fnd_num[hour%10];
    Alarm_ON= select_fnd[4] | fnd_num[Alarm_hour%10];
    Stop_Watch= select_fnd[4] | fnd_num[SW_min%10];
  }
  
  else if(FND_count==2)
  { 
    FND_count=3;
    Basic_Time= select_fnd[3] | fnd_num[min/10];
    Alarm_ON= select_fnd[3] | fnd_num[Alarm_min/10];
    Stop_Watch= select_fnd[3] | fnd_num[SW_sec/10];
  }

  else if(FND_count==3)
  { 
    FND_count=4;
    Basic_Time= select_fnd[2] | fnd_num[min%10];
    Alarm_ON= select_fnd[2] | fnd_num[Alarm_min%10];
    Stop_Watch= select_fnd[2] | fnd_num[SW_sec%10];
  }
  
  else if(FND_count==4)
  { 
    FND_count=5;
    Basic_Time= select_fnd[1] | fnd_num[sec/10];
    Stop_Watch= select_fnd[1] | fnd_num[SW_msec/10];
  }

  else
  { 
    FND_count=0;
    Basic_Time= select_fnd[0] | fnd_num[sec%10];
    Stop_Watch= select_fnd[0] | fnd_num[SW_msec%10];
  }
  TCNT0 = 0x70;
}


SIGNAL(SIG_INTERRUPT0)
{
  Mode++;       //Mode증가 
  if(Mode>4)    //Mode=1(시계),Mode=2(시간조정),Mode=3(알람),Mode=4(스탑워치)
    Mode=1;
}


SIGNAL(SIG_INTERRUPT1)
{
  a=0;
  if(Alarm_hour==hour && Alarm_min == min)
  {
    a=1;
    PORTD=0x00;
  }
  
  if(Mode==2)
  {
    hour++;
  }

  else if(Mode==3)
  {
    Alarm_hour++;
    if(Alarm_hour>12)
      Alarm_hour=0;
  }

  else if(Mode==4)
  {
    SW_msec=0, SW_sec=0, SW_min=0;
  }
}


SIGNAL(SIG_INTERRUPT2) //mode 스위치3번(int2)기능
{
  if(Mode==2)
  {                   //Mode2일 경우 분 증가
    min++;
  }
  
  else if(Mode==3)
  {                   //Mode3일 경우 Alarm_min 증가
    Alarm_min++;
    if(Alarm_min>60)
      Alarm_min=0;
  }
  
  else if(Mode==4)
  {                   //stop_swatch 구동을 위한 변수
    function ++; //Mode4일 경우 증가
    if(function>1)
      function = 0;
  }
}


int main(void)
{
  initialize_timer();
  DDRC = 0xff;  //PORTC는 출력
  DDRD = 0xf0;  //PORTD 상위 4bit 출력 하위 4bit 입력
  DDRA =0xff;   //PORTA는 출력
  DDRF=0xff;    //PORTF는 출력
  do
  {
    if(Mode==1)
    {           //TIME
      PORTC = Basic_Time; //PORTC 출력을 Basic_Time
    }
    
    else if(Mode==2)
    {           //Time setting on-off 표현을 위한 if문
      if((Main_count/100)%2==0)
      {         // 2.5초에 한번씩 on-off
        PORTC = Basic_Time;
      }
        
      else
      {
        PORTC = 0xff;
      }
    }
    
    else if(Mode==3)
    {           //Alarm
      PORTC = Alarm_ON; //PORTC 출력을 Alarm_ON
    }
    
    else
    {           //Stop Watch
      PORTC = Stop_Watch; //PORTC 출력을 Stop_watch
    }
  }while(1);
}

void initialize_timer(void)
{
  TCNT0 = 0x70;                             //{(0xff-0x70)+1} * 128 * (1/14.7456Mhz) = 10ms
  TCCR0 |= (1<<CS02)|(1<<CS00);             //timer0 prescaler=128
  TIMSK |= (1<<TOIE0);                      //timer0 overflow interrupt
  EIMSK |= (1<<INT2)|(1<<INT1)|(1<<INT0);   // INTERRUPT 0,1,2 USE
  EICRA |= (1<<ISC01)|(1<<ISC11)|(1<<ISC21);// The falling Edge
  sei();
}
